name: Deploy to Staging

on:
  workflow_dispatch:
    inputs:
      run_verification:
        description: 'Run foundations verification after deployment'
        required: false
        default: 'true'
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_test.txt

    - name: Set up test environment
      run: |
        # Set test environment variables
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "CLERK_SECRET_KEY=sk_test_fake_key_for_testing" >> $GITHUB_ENV
        echo "CLERK_PUBLISHABLE_KEY=pk_test_fake_key_for_testing" >> $GITHUB_ENV
        echo "TWILIO_ACCOUNT_SID=ACfake_account_sid" >> $GITHUB_ENV
        echo "TWILIO_AUTH_TOKEN=fake_auth_token" >> $GITHUB_ENV
        echo "CALLRAIL_API_KEY=fake_callrail_key" >> $GITHUB_ENV
        echo "CALLRAIL_ACCOUNT_ID=fake_account_id" >> $GITHUB_ENV
        echo "DEEPGRAM_API_KEY=fake_deepgram_key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=sk-fake_openai_key" >> $GITHUB_ENV
        echo "BLAND_API_KEY=fake_bland_key" >> $GITHUB_ENV
        echo "ALLOWED_ORIGINS=http://localhost:3000,https://test.example.com" >> $GITHUB_ENV
        echo "RATE_LIMIT_USER=5/minute" >> $GITHUB_ENV
        echo "RATE_LIMIT_TENANT=10/minute" >> $GITHUB_ENV
        echo "IDEMPOTENCY_TTL_DAYS=90" >> $GITHUB_ENV
        echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
        echo "OBS_REDACT_PII=true" >> $GITHUB_ENV
        echo "ENABLE_CELERY=true" >> $GITHUB_ENV
        echo "ENABLE_CELERY_BEAT=false" >> $GITHUB_ENV

    - name: Wait for services
      run: |
        timeout 30s bash -c 'until redis-cli -h localhost ping; do sleep 1; done'
        timeout 30s bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Run all verification tests
      run: |
        make verify:all

    - name: Run readiness tests
      run: |
        pytest tests/test_readiness.py -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fly.io CLI
      uses: superfly/flyctl-actions/setup-flyctl@master

    - name: Deploy to Fly.io
      run: |
        flyctl deploy --remote-only
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 30

  verify:
    needs: deploy
    runs-on: ubuntu-latest
    if: success() && inputs.run_verification == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests

    - name: Wait for deployment to be ready
      run: |
        echo "Waiting for deployment to be fully ready..."
        sleep 60

    - name: Check deployment health
      run: |
        curl -f https://tv-mvp-test.fly.dev/health || exit 1
        echo "✅ Health check passed"

    - name: Check readiness
      run: |
        echo "🔍 Checking readiness endpoint..."
        response=$(curl -s https://tv-mvp-test.fly.dev/ready || echo '{"ready":false,"error":"connection_failed"}')
        echo "Readiness response: $response"
        
        # Parse JSON response
        ready=$(echo $response | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('ready', False))" 2>/dev/null || echo "false")
        
        if [ "$ready" = "True" ] || [ "$ready" = "true" ]; then
          echo "✅ Readiness check passed"
        else
          echo "⚠️ Readiness check failed - continuing with verification"
          echo "Response: $response"
        fi

    - name: Run infrastructure validation
      run: |
        echo "🔍 Running infrastructure validation..."
        python scripts/quick_validation.py https://tv-mvp-test.fly.dev || echo "⚠️ Infrastructure validation had issues"

    - name: Run critical issue detection
      run: |
        echo "🔍 Running critical issue detection..."
        python scripts/detect_critical_issues.py https://tv-mvp-test.fly.dev || echo "⚠️ Critical issues detected"

    - name: Run observability smoke test
      run: |
        echo "🔍 Running observability smoke test..."
        BASE=https://tv-mvp-test.fly.dev bash scripts/smoke_obs.sh || echo "⚠️ Observability smoke test had issues"

    - name: Summary
      run: |
        echo "🎉 Deployment verification completed!"
        echo "Check the logs above for any warnings or issues."
        echo "Deployment URL: https://tv-mvp-test.fly.dev"
